"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaults = void 0;
exports.defaults = {
    origin: '*',
    headers: ['Origin', 'X-Requested-With', 'Content-Type', 'Accept'],
    methods: ['GET', 'HEAD', 'POST', 'PUT', 'PATCH', 'UPDATE', 'OPTIONS', 'DELETE'],
    expose: [],
    maxAge: undefined,
    credentials: false,
};
exports.default = (options) => {
    options = Object.assign(Object.assign({}, exports.defaults), options);
    return (handler) => {
        return function (req, res) {
            if (typeof options.origin === 'boolean' && options.origin === false) {
                return res.status(403).end('not allowed');
            }
            if (options.origin !== '*' && req.headers.origin === undefined) {
                return res.status(403).end('unknown origin');
            }
            if (typeof options.origin === 'string') {
                if (options.origin === '*' || options.origin === req.headers.origin) {
                    res.setHeader('Access-Control-Allow-Origin', options.origin);
                }
            }
            else if (options.origin instanceof RegExp) {
                if (options.origin.test(req.headers.origin)) {
                    res.setHeader('Access-Control-Allow-Origin', req.headers.origin);
                }
            }
            else {
                const allowedOrigin = options.origin.some((h) => typeof h === 'string' ? h === req.headers.origin : h.test(req.headers.origin));
                if (allowedOrigin) {
                    res.setHeader('Access-Control-Allow-Origin', req.headers.origin);
                }
            }
            res.setHeader('Access-Control-Allow-Headers', options.headers.join(', '));
            res.setHeader('Access-Control-Allow-Credentials', options.credentials.toString());
            res.setHeader('Access-Control-Allow-Methods', options.methods.join(', '));
            if (options.expose.length) {
                res.setHeader('Access-Control-Expose-Methods', options.methods.join(', '));
            }
            if (!isNaN(options.maxAge)) {
                res.setHeader('Access-Control-Max-Age', options.maxAge);
            }
            if (options.origin === '*' || (Array.isArray(options.origin) && options.origin.length > 1)) {
                res.setHeader('Vary', 'Origin');
            }
            if (req.method === 'OPTIONS') {
                return res.status(200).json({ body: 'OK' });
            }
            return handler.apply(this, [req, res]);
        };
    };
};
